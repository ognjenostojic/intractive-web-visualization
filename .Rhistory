write_csv(data_clean, "updated_precipitation_type_data.csv")
runApp('app_project.R')
library(shiny)
library(ggplot2)
library(readr)
library(leaflet)
library(dplyr)
library(dygraphs)
library(xts)
library(ggiraph)
library(plotly)
library(highcharter)
library(echarts4r)
install.packages(c("plotly", "highcharter", "echarts4r"))
library(shiny)
library(ggplot2)
library(readr)
library(leaflet)
library(dplyr)
library(dygraphs)
library(xts)
library(ggiraph)
library(plotly)
library(highcharter)
library(echarts4r)
setwd("C:/Users/Ognjen/Desktop/Interactive Web Visualization for Hydroclimatologycal Data/Project/")
# Source the external function that generates plots
source("plots_each_and_all_park.R")
# Define UI
ui <- fluidPage(
titlePanel("Precipitation Data Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a National Park to display its precipitation data over time."),
selectInput("park", "Choose a Park:",
choices = c("All Parks", "Đerdap National Park", "Tara National Park",
"Kopaonik National Park", "Fruška Gora National Park",
"Šar Planina National Park"))
),
mainPanel(
tabsetPanel(
tabPanel("Map", leafletOutput("map")),
tabPanel("Static Plot", plotOutput("precipPlot")),
tabPanel("Overall Static Plot", plotOutput("overallPlot")),
tabPanel("Dygraph Interactive Plot", dygraphOutput("dygraphPlot")),
tabPanel("ggiraph Interactive Plot", girafeOutput("girafePlot", width = "100%", height = "400px")),
tabPanel("Plotly Interactive Plot", plotlyOutput("plotlyPlot")),
tabPanel("Highcharter Plot", highchartOutput("highcharterPlot")),
tabPanel("ECharts Interactive Plot", echarts4rOutput("echartsPlot"))
)
)
)
)
# Define server logic
server <- function(input, output) {
# Read and prepare data
data <- read_csv("C:/Users/Ognjen/Desktop/Interactive Web Visualization for Hydroclimatologycal Data/Project/updated_precipitation_type_data.csv") %>%
mutate(time = as.Date(time))
# Generate all required plots once
all_plots <- generate_precipitation_plots(data)
# Define park locations
locations <- data.frame(
name = c("Đerdap National Park", "Tara National Park",
"Kopaonik National Park", "Fruška Gora National Park",
"Šar Planina National Park"),
latitude = c(44.60, 43.890, 43.298, 45.1567, 42.1881),
longitude = c(22.00, 19.564, 20.812, 19.7251, 20.7536)
)
# Render the map
output$map <- renderLeaflet({
mapData <- if (input$park == "All Parks") locations else locations[locations$name == input$park, ]
leaflet(data = mapData) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name)
})
# Render the selected static plot
output$precipPlot <- renderPlot({
if (input$park == "All Parks") {
print(all_plots[["All Parks Combined"]])
} else {
print(all_plots[[input$park]])
}
})
# Render the overall static plot
output$overallPlot <- renderPlot({
print(all_plots[["All Parks Combined"]])
})
# Render the dygraph interactive plot
output$dygraphPlot <- renderDygraph({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
ts_data <- xts(selected_data$ptype, order.by = selected_data$time)
dygraph(ts_data, main = paste("Dygraph: Precipitation Type -", input$park)) %>%
dyOptions(drawPoints = TRUE, pointSize = 2)
})
# Render the ggiraph interactive plot
output$girafePlot <- renderGirafe({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
gg <- ggplot(selected_data, aes(x = time, y = ptype, tooltip = park)) +
geom_line_interactive(aes(color = park), na.rm = TRUE) +
labs(
title = paste("Interactive Precipitation -", input$park),
x = "Time",
y = "Precipitation Type"
) +
theme_minimal()
girafe(ggobj = gg)
})
# Plotly plot
output$plotlyPlot <- renderPlotly({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
p <- ggplot(selected_data, aes(x = time, y = ptype, color = park)) +
geom_line() +
labs(title = paste("Plotly Precipitation -", input$park), x = "Time", y = "Precipitation Type") +
theme_minimal()
ggplotly(p)
})
# Highcharter plot
output$highcharterPlot <- renderHighchart({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
highchart() %>%
hc_title(text = paste("Highcharter: Precipitation Type -", input$park)) %>%
hc_xAxis(type = "datetime") %>%
hc_add_series_xts(xts::xts(selected_data$ptype, order.by = selected_data$time),
name = "Precipitation Type") %>%
hc_tooltip(valueDecimals = 2)
})
# ECharts plot
output$echartsPlot <- renderEcharts4r({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
selected_data %>%
e_charts(time) %>%
e_line(ptype, name = "Precipitation Type") %>%
e_title(text = paste("ECharts: Precipitation -", input$park)) %>%
e_tooltip(trigger = "axis") %>%
e_theme("infographic")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(readr)
library(leaflet)
library(dplyr)
library(dygraphs)
library(xts)
library(ggiraph)
library(plotly)
library(echarts4r)  # Removed highcharter
setwd("C:/Users/Ognjen/Desktop/Interactive Web Visualization for Hydroclimatologycal Data/Project/")
source("plots_each_and_all_park.R")
ui <- fluidPage(
titlePanel("Precipitation Data Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a National Park to display its precipitation data over time."),
selectInput("park", "Choose a Park:",
choices = c("All Parks", "Đerdap National Park", "Tara National Park",
"Kopaonik National Park", "Fruška Gora National Park",
"Šar Planina National Park"))
),
mainPanel(
tabsetPanel(
tabPanel("Map", leafletOutput("map")),
tabPanel("Static Plot", plotOutput("precipPlot")),
tabPanel("Overall Static Plot", plotOutput("overallPlot")),
tabPanel("Dygraph Interactive Plot", dygraphOutput("dygraphPlot")),
tabPanel("ggiraph Interactive Plot", girafeOutput("girafePlot", width = "100%", height = "400px")),
tabPanel("Plotly Interactive Plot", plotlyOutput("plotlyPlot")),
tabPanel("ECharts Interactive Plot", echarts4rOutput("echartsPlot"))  # Highcharter removed
)
)
)
)
server <- function(input, output) {
data <- read_csv("C:/Users/Ognjen/Desktop/Interactive Web Visualization for Hydroclimatologycal Data/Project/updated_precipitation_type_data.csv") %>%
mutate(time = as.Date(time))
all_plots <- generate_precipitation_plots(data)
locations <- data.frame(
name = c("Đerdap National Park", "Tara National Park",
"Kopaonik National Park", "Fruška Gora National Park",
"Šar Planina National Park"),
latitude = c(44.60, 43.890, 43.298, 45.1567, 42.1881),
longitude = c(22.00, 19.564, 20.812, 19.7251, 20.7536)
)
output$map <- renderLeaflet({
mapData <- if (input$park == "All Parks") locations else locations[locations$name == input$park, ]
leaflet(data = mapData) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name)
})
output$precipPlot <- renderPlot({
if (input$park == "All Parks") {
print(all_plots[["All Parks Combined"]])
} else {
print(all_plots[[input$park]])
}
})
output$overallPlot <- renderPlot({
print(all_plots[["All Parks Combined"]])
})
output$dygraphPlot <- renderDygraph({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
ts_data <- xts(selected_data$ptype, order.by = selected_data$time)
dygraph(ts_data, main = paste("Dygraph: Precipitation Type -", input$park)) %>%
dyOptions(drawPoints = TRUE, pointSize = 2)
})
output$girafePlot <- renderGirafe({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
gg <- ggplot(selected_data, aes(x = time, y = ptype, tooltip = park)) +
geom_line_interactive(aes(color = park), na.rm = TRUE) +
labs(
title = paste("Interactive Precipitation -", input$park),
x = "Time",
y = "Precipitation Type"
) +
theme_minimal()
girafe(ggobj = gg)
})
output$plotlyPlot <- renderPlotly({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
p <- ggplot(selected_data, aes(x = time, y = ptype, color = park)) +
geom_line() +
labs(title = paste("Plotly Precipitation -", input$park), x = "Time", y = "Precipitation Type") +
theme_minimal()
ggplotly(p)
})
output$echartsPlot <- renderEcharts4r({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
selected_data %>%
e_charts(time) %>%
e_line(ptype, name = "Precipitation Type") %>%
e_title(text = paste("ECharts: Precipitation -", input$park)) %>%
e_tooltip(trigger = "axis") %>%
e_theme("infographic")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(readr)
library(leaflet)
library(dplyr)
library(dygraphs)
library(xts)
library(ggiraph)
library(plotly)
library(echarts4r)
setwd("C:/Users/Ognjen/Desktop/Interactive Web Visualization for Hydroclimatologycal Data/Project/")
source("plots_each_and_all_park.R")
ui <- fluidPage(
titlePanel("Precipitation Data Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a National Park to display its precipitation data over time."),
selectInput("park", "Choose a Park:",
choices = c("All Parks", "Đerdap National Park", "Tara National Park",
"Kopaonik National Park", "Fruška Gora National Park",
"Šar Planina National Park"))
),
mainPanel(
tabsetPanel(
tabPanel("Map", leafletOutput("map")),
tabPanel("Static Plot", plotOutput("precipPlot")),
tabPanel("Overall Static Plot", plotOutput("overallPlot")),
tabPanel("Dygraph", dygraphOutput("dygraphPlot")),
tabPanel("ggiraph", girafeOutput("girafePlot", width = "100%", height = "400px")),
tabPanel("Plotly", plotlyOutput("plotlyPlot")),
tabPanel("ECharts", echarts4rOutput("echartsPlot"))  # Highcharter removed
)
)
)
)
server <- function(input, output) {
data <- read_csv("C:/Users/Ognjen/Desktop/Interactive Web Visualization for Hydroclimatologycal Data/Project/updated_precipitation_type_data.csv") %>%
mutate(time = as.Date(time))
all_plots <- generate_precipitation_plots(data)
locations <- data.frame(
name = c("Đerdap National Park", "Tara National Park",
"Kopaonik National Park", "Fruška Gora National Park",
"Šar Planina National Park"),
latitude = c(44.60, 43.890, 43.298, 45.1567, 42.1881),
longitude = c(22.00, 19.564, 20.812, 19.7251, 20.7536)
)
output$map <- renderLeaflet({
mapData <- if (input$park == "All Parks") locations else locations[locations$name == input$park, ]
leaflet(data = mapData) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name)
})
output$precipPlot <- renderPlot({
if (input$park == "All Parks") {
print(all_plots[["All Parks Combined"]])
} else {
print(all_plots[[input$park]])
}
})
output$overallPlot <- renderPlot({
print(all_plots[["All Parks Combined"]])
})
output$dygraphPlot <- renderDygraph({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
ts_data <- xts(selected_data$ptype, order.by = selected_data$time)
dygraph(ts_data, main = paste("Dygraph: Precipitation Type -", input$park)) %>%
dyOptions(drawPoints = TRUE, pointSize = 2)
})
output$girafePlot <- renderGirafe({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
gg <- ggplot(selected_data, aes(x = time, y = ptype, tooltip = park)) +
geom_line_interactive(aes(color = park), na.rm = TRUE) +
labs(
title = paste("Interactive Precipitation -", input$park),
x = "Time",
y = "Precipitation Type"
) +
theme_minimal()
girafe(ggobj = gg)
})
output$plotlyPlot <- renderPlotly({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
p <- ggplot(selected_data, aes(x = time, y = ptype, color = park)) +
geom_line() +
labs(title = paste("Plotly Precipitation -", input$park), x = "Time", y = "Precipitation Type") +
theme_minimal()
ggplotly(p)
})
output$echartsPlot <- renderEcharts4r({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
selected_data %>%
e_charts(time) %>%
e_line(ptype, name = "Precipitation Type") %>%
e_title(text = paste("ECharts: Precipitation -", input$park)) %>%
e_tooltip(trigger = "axis") %>%
e_theme("infographic")
})
}
shinyApp(ui = ui, server = server)
runApp('app_project.R')
library(shiny)
library(ggplot2)
library(readr)
library(leaflet)
library(dplyr)
library(dygraphs)
library(xts)
library(ggiraph)
library(plotly)
library(echarts4r)
setwd("C:/Users/Ognjen/Desktop/Interactive Web Visualization for Hydroclimatologycal Data/Project/")
source("plots_each_and_all_park.R")
ui <- fluidPage(
titlePanel("Precipitation Data Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a National Park to display its precipitation data over time."),
selectInput("park", "Choose a Park:",
choices = c("All Parks", "Đerdap National Park", "Tara National Park",
"Kopaonik National Park", "Fruška Gora National Park",
"Šar Planina National Park"))
),
mainPanel(
tabsetPanel(
tabPanel("Map", leafletOutput("map")),
tabPanel("Static Plot", plotOutput("precipPlot")),
tabPanel("Overall Static Plot", plotOutput("overallPlot")),
tabPanel("Dygraph", dygraphOutput("dygraphPlot")),
tabPanel("ggiraph", girafeOutput("girafePlot", width = "100%", height = "400px")),
tabPanel("Plotly", plotlyOutput("plotlyPlot")),
tabPanel("ECharts", echarts4rOutput("echartsPlot"))
)
)
)
)
server <- function(input, output) {
data <- read_csv("C:/Users/Ognjen/Desktop/Interactive Web Visualization for Hydroclimatologycal Data/Project/updated_precipitation_type_data.csv") %>%
mutate(time = as.Date(time))
all_plots <- generate_precipitation_plots(data)
locations <- data.frame(
name = c("Đerdap National Park", "Tara National Park",
"Kopaonik National Park", "Fruška Gora National Park",
"Šar Planina National Park"),
latitude = c(44.60, 43.890, 43.298, 45.1567, 42.1881),
longitude = c(22.00, 19.564, 20.812, 19.7251, 20.7536)
)
output$map <- renderLeaflet({
mapData <- if (input$park == "All Parks") locations else locations[locations$name == input$park, ]
leaflet(data = mapData) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name)
})
output$precipPlot <- renderPlot({
if (input$park == "All Parks") {
print(all_plots[["All Parks Combined"]])
} else {
print(all_plots[[input$park]])
}
})
output$overallPlot <- renderPlot({
print(all_plots[["All Parks Combined"]])
})
output$dygraphPlot <- renderDygraph({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
ts_data <- xts(selected_data$ptype, order.by = selected_data$time)
dygraph(ts_data, main = paste("Dygraph: Precipitation Type -", input$park)) %>%
dyOptions(drawPoints = TRUE, pointSize = 2)
})
output$girafePlot <- renderGirafe({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
gg <- ggplot(selected_data, aes(x = time, y = ptype, tooltip = park)) +
geom_line_interactive(aes(color = park), na.rm = TRUE) +
labs(
title = paste("Interactive Precipitation -", input$park),
x = "Time",
y = "Precipitation Type"
) +
theme_minimal()
girafe(ggobj = gg)
})
output$plotlyPlot <- renderPlotly({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
p <- ggplot(selected_data, aes(x = time, y = ptype, color = park)) +
geom_line() +
labs(title = paste("Plotly Precipitation -", input$park), x = "Time", y = "Precipitation Type") +
theme_minimal()
ggplotly(p)
})
output$echartsPlot <- renderEcharts4r({
selected_data <- if (input$park == "All Parks") {
data
} else {
data %>% filter(park == input$park)
} %>% filter(!is.na(ptype), !is.na(time))
selected_data %>%
e_charts(time) %>%
e_line(ptype, name = "Precipitation Type") %>%
e_title(text = paste("ECharts: Precipitation -", input$park)) %>%
e_tooltip(
trigger = "axis",
backgroundColor = "#ffffff",
borderColor = "#666666",
textStyle = list(color = "#000000"),
padding = 10,
extraCssText = "border-radius: 8px; box-shadow: 0px 0px 5px rgba(0,0,0,0.2);"
) %>%
e_theme("infographic")
})
}
shinyApp(ui = ui, server = server)
